{"version":3,"sources":["js/db.js","js/renders/renderFavorites.js","js/renders/renderAllMoviesGrid.js","js/renders/renderAllMoviesList.js","js/handlers.js","js/listeners.js","js/renders/renderModalMovie.js","js/helpers.js","js/renders/renderDashboard.js","js/fetchData.js","index.js"],"names":["getDBdata","key","JSON","parse","localStorage","getItem","setDBdata","data","setItem","stringify","removeDBdata","removeItem","favoriteUl","document","querySelector","renderFavorites","ids","allCards","length","movies","favoriteMovies","map","id","name","join","innerHTML","moviesWrapper","renderAllMoviesGrid","Object","values","img","year","favoriteMoviesId","dataAtributes","includes","toString","starColor","renderAllMoviesList","description","genres","genresList","genre","markFavoriteMovies","e","star","target","closest","classList","contains","remove","add","card","dataset","openNodal","clickFavoriteUl","item","idRemove","querySelectorAll","filter","elem","newFavoriteMovies","movie","newFavoriteMoviesId","changeMoviesLayout","layout","selectedGenre","toggle","newTarget","parentElement","changeSelectedGener","value","addModalMovieListener","modal","closeModalHandler","preventDefault","removeEventListener","addEventListener","addDashboardListener","movieContent","renderModalMovie","modalMovie","director","starring","starringList","content","openModalMovie","getFavorites","groupMoviesByGenres","allGeners","Set","flat","moviesByGeners","unshift","truncate","str","len","new_str","substr","lastIndexOf","renderDashboard","dashboard","genresOptionsList","dashboardContent","fetchData","url","response","fetch","json","idSet","moviesById","err","console","log","message","FullList","moviesGallery"],"mappings":"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","file":"src.1d184b9c.js","sourceRoot":"..\\src","sourcesContent":["//  localStorage \r\n\r\nexport function getDBdata(key) {\r\n  return JSON.parse(localStorage.getItem(key))\r\n}\r\n\r\nexport function setDBdata(key, data) {\r\n  localStorage.setItem(key, JSON.stringify(data))\r\n}\r\n\r\nexport function removeDBdata(key) {\r\n  localStorage.removeItem(key);\r\n}","//  renderFavorites  ===============================\r\n\r\nimport { getDBdata, removeDBdata, setDBdata } from '../db'\r\n\r\nconst favoriteUl = document.querySelector('.favorite-ul')\r\n\r\nexport const renderFavorites = (ids) => {\r\n\r\n  let allCards = `<p>You don't have favorite movies</p>`\r\n\r\n  if (ids?.length > 0) {\r\n\r\n    const movies = getDBdata('movies')\r\n    const favoriteMovies = ids.map(id => movies[id])\r\n\r\n    removeDBdata('favoriteMovies')\r\n    setDBdata('favoriteMovies', favoriteMovies)\r\n\r\n    allCards = favoriteMovies.map(({ id, name }) => {\r\n      return `\r\n      <li class=\"favorite-text\" data-id=\"${id}\">\r\n      <span class=\"favorite-name\">&rarr;&nbsp;&nbsp;${name}</span>\r\n      <span class=\"delete-mark\" data-id=\"${id}\">&times;</span>\r\n      \r\n      </li>\r\n      `\r\n    }).join('')\r\n  }\r\n\r\n  favoriteUl.innerHTML = \"\"\r\n  favoriteUl.innerHTML = allCards\r\n}\r\n","//  renderAllMovies ==================\r\nimport { getDBdata } from '../db'\r\n\r\nconst moviesWrapper = document.querySelector('.movies-wrapper')\r\n\r\nexport function renderAllMoviesGrid(movies) {\r\n\r\n  if (!movies) {\r\n    moviesWrapper.innerHTML = ''\r\n    moviesWrapper.innerHTML =\r\n      `\r\n      <div class=\"allert-warning text-center \" > localStorage empty</ >\r\n        <div class=\"allert-warning text-center \">Reload the app to get movies from the server</div>\r\n      `\r\n    return\r\n  }\r\n\r\n  const allCards = Object.values(movies).map(({ id, img, name, year }) => {\r\n\r\n    // get favorite movies from localStorage\r\n    let favoriteMoviesId = getDBdata('favoriteMoviesId')\r\n\r\n    const dataAtributes = favoriteMoviesId?.includes(id.toString())\r\n      ? `data-id=\"${id}\" data-star=\"favorite\"`\r\n      : `data-id=\"${id}\" data-star=\"white\" `\r\n\r\n    const starColor = favoriteMoviesId?.includes(id.toString())\r\n      ? 'star-gold' : 'star-white'\r\n\r\n    return `\r\n        <div class=\"card\" ${dataAtributes}\" >\r\n        <div class=\"star ${starColor}\" ></div>\r\n        <img src=\"${img}\" class=\"movie-img\" alt=\"${name}\">\r\n        <div class=\"movie-body\">\r\n          <p class=\"movie-text text-center\">${name}</p>\r\n          <p class=\"movie-text text-center\">${year}</p>\r\n        </div>\r\n      </div>\r\n      `\r\n  }).join('')\r\n\r\n  moviesWrapper.innerHTML = ''\r\n  moviesWrapper.innerHTML = allCards\r\n}\r\n","//  renderAllMovies ==================\r\nimport { getDBdata } from '../db'\r\nimport { truncate } from '../helpers'\r\n\r\nconst moviesWrapper = document.querySelector('.movies-wrapper')\r\n\r\nexport function renderAllMoviesList(movies) {\r\n\r\n  if (!movies) {\r\n    moviesWrapper.innerHTML = ''\r\n    moviesWrapper.innerHTML =\r\n      `\r\n      <div class=\"allert-warning text-center \" > localStorage empty</ >\r\n        <div class=\"allert-warning text-center \">Reload the app to get movies from the server</div>\r\n      `\r\n    return\r\n  }\r\n\r\n  const allCards = Object.values(movies).map(({ id, img, name, year, description, genres }) => {\r\n\r\n    // get favorite movies from localStorage\r\n    let favoriteMoviesId = getDBdata('favoriteMoviesId')\r\n\r\n    const dataAtributes = favoriteMoviesId?.includes(id.toString())\r\n      ? `data-id=\"${id}\" data-star=\"favorite\"`\r\n      : `data-id=\"${id}\" data-star=\"white\" `\r\n\r\n    const starColor = favoriteMoviesId?.includes(id.toString())\r\n      ? 'star-gold' : 'star-white'\r\n\r\n    const genresList = genres\r\n      .map(genre => `<span>${genre}</span>`)\r\n      .join('')\r\n\r\n    return `\r\n        <div class=\"card list\" ${dataAtributes}\" >\r\n          <div class=\"star ${starColor}\" ></div>\r\n          <div class=\"movie-content-left\">\r\n \r\n           <img src=\"${img}\" class=\"movie-img\" alt=\"${name}\">\r\n          </div>\r\n\r\n          <div class=\"movie-content-rigth\">\r\n\r\n            <div class=\"movie-title\">\r\n              <span class=\"movie-text text-center\">${name}</span>\r\n              <span class=\"movie-text text-center\">${year}</span>\r\n            </div>\r\n\r\n            <div class=\"movie-description\">\r\n              ${truncate(description, 120)}\r\n            </div>\r\n\r\n            <div class=\"movie-geners\">\r\n             ${genresList}\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n      `\r\n  }).join('')\r\n\r\n  moviesWrapper.innerHTML = ''\r\n  moviesWrapper.innerHTML = allCards\r\n}\r\n","//  markFavoriteMovies\r\n\r\nimport { getFavorites } from './helpers'\r\nimport { setDBdata, removeDBdata } from './db'\r\n\r\nfunction markFavoriteMovies(e) {\r\n  const star = e.target.closest('.star')\r\n  if (star.classList.contains('star-gold')) {\r\n    star.classList.remove('star-gold')\r\n    star.classList.add('star-white')\r\n  } else {\r\n    star.classList.remove('star-white')\r\n    star.classList.add('star-gold')\r\n  }\r\n\r\n  const card = e.target.closest('.card')\r\n  card.dataset.star === \"white\"\r\n    ? card.dataset.star = \"favorite\"\r\n    : card.dataset.star = \"white\"\r\n  const favoriteMoviesId = getFavorites()\r\n\r\n  removeDBdata('favoriteMoviesId');\r\n\r\n  setDBdata('favoriteMoviesId', favoriteMoviesId)\r\n\r\n  return favoriteMoviesId\r\n}\r\n\r\n//  openNodal callback\r\n\r\nimport { renderFavorites } from './renders/renderFavorites'\r\nimport { openModalMovie } from './helpers'\r\n\r\nexport function openNodal(e) {\r\n  if (e.target.closest('.star')) {\r\n    const favoriteMoviesId = markFavoriteMovies(e)\r\n    renderFavorites(favoriteMoviesId)\r\n  }\r\n\r\n  if (e.target.closest('.movie-img')) {\r\n    openModalMovie(e)\r\n  }\r\n\r\n  if (e.target.closest('.favorite-name')) {\r\n    openModalMovie(e)\r\n  }\r\n}\r\n\r\n\r\n//  clickFavoriteUl callback \r\nconst moviesWrapper = document.querySelector('.movies-wrapper')\r\n\r\nimport { getDBdata } from './db'\r\n// import { getDBdata, setDBdata, removeDBdata } from './db'\r\n\r\nexport function clickFavoriteUl(e) {\r\n  const item = e.target.closest('.delete-mark')\r\n\r\n  if (item) {\r\n    const idRemove = item.dataset.id\r\n\r\n    // Reset favorite for Movie Galary (data-atribute & class)\r\n\r\n    let card = [...moviesWrapper.querySelectorAll('.card')]\r\n      .filter(elem => +elem.dataset.id === +idRemove)[0]\r\n\r\n    card.dataset.star === \"white\" ? card.dataset.star = \"favorite\" : card.dataset.star = \"white\"\r\n\r\n    card.querySelector('.star').classList.remove('star-gold')\r\n    card.querySelector('.star').classList.add('star-white')\r\n\r\n    // Reset favorite movies' \r\n\r\n    let favoriteMovies = getDBdata('favoriteMovies')\r\n    let newFavoriteMovies = favoriteMovies.filter(movie => +movie.id !== +idRemove)\r\n    removeDBdata('favoriteMovies')\r\n    setDBdata('favoriteMovies', newFavoriteMovies)\r\n\r\n    // Reset favorite movies' id\r\n\r\n    let favoriteMoviesId = getDBdata('favoriteMoviesId')\r\n    let newFavoriteMoviesId = favoriteMoviesId.filter(id => id !== idRemove)\r\n    removeDBdata('favoriteMoviesId')\r\n    setDBdata('favoriteMoviesId', newFavoriteMoviesId)\r\n\r\n    renderFavorites(newFavoriteMoviesId)\r\n  }\r\n}\r\n\r\nexport function changeMoviesLayout(e) {\r\n\r\n  const target = e.target\r\n  const layout = target.dataset.layout\r\n\r\n  // if (!!layout) {\r\n  //   removeDBdata('currentView')\r\n  //   setDBdata('currentView', layout)\r\n  //   console.log('if layout: ', layout);\r\n  // }\r\n\r\n  if (!!layout && layout == 'grid') {\r\n    removeDBdata('currentView')\r\n    setDBdata('currentView', layout)\r\n    const movies = getDBdata('moviesByGenres')\r\n    const selectedGenre = getDBdata('selectedGenre') ?? 'all'\r\n    renderAllMoviesGrid(movies[selectedGenre])\r\n    target.classList.toggle('grid-gray')\r\n    target.classList.toggle('grid-dark')\r\n    const newTarget = target.parentElement\r\n      .querySelector('[data-layout =\\'list\\']')\r\n    newTarget.classList.toggle('list-dark')\r\n    newTarget.classList.toggle('list-gray')\r\n  }\r\n\r\n  if (!!layout && layout == 'list') {\r\n    removeDBdata('currentView')\r\n    setDBdata('currentView', layout)\r\n    const movies = getDBdata('moviesByGenres')\r\n    const selectedGenre = getDBdata('selectedGenre') ?? 'all'\r\n    renderAllMoviesList(movies[selectedGenre])\r\n    target.classList.toggle('list-gray')\r\n    target.classList.toggle('list-dark')\r\n    const newTarget = target.parentElement\r\n      .querySelector('[data-layout =\\'grid\\']')\r\n    newTarget.classList.toggle('grid-dark')\r\n    newTarget.classList.toggle('grid-gray')\r\n  }\r\n}\r\n\r\n//  Change selected gener\r\n\r\nimport { renderAllMoviesGrid } from './renders/renderAllMoviesGrid'\r\nimport { renderAllMoviesList } from './renders/renderAllMoviesList'\r\n\r\nexport function changeSelectedGener(e) {\r\n\r\n  const selectedGenre = e.target.value\r\n  removeDBdata(selectedGenre)\r\n  setDBdata('selectedGenre', selectedGenre)\r\n\r\n  const movies = getDBdata('moviesByGenres')\r\n  const currentView = getDBdata('currentView') ?? 'list'\r\n\r\n  currentView === 'grid'\r\n    ? renderAllMoviesGrid(movies[selectedGenre])\r\n    : renderAllMoviesList(movies[selectedGenre])\r\n}","//  addModalMovieListener \r\n\r\nexport function addModalMovieListener() {\r\n\r\n  const modal = document.querySelector('.modal')\r\n  const closeModalHandler = (e) => {\r\n    e.preventDefault()\r\n    const target = e.target\r\n    if (target.classList.contains('modal')\r\n      || target.classList.contains('modal-close')) {\r\n      modal.classList.add('modal-hide')\r\n      modal.removeEventListener('click', closeModalHandler)\r\n    }\r\n  }\r\n\r\n  modal.addEventListener('click', closeModalHandler)\r\n}\r\n\r\n//  addDashboardListener\r\n\r\nimport { changeSelectedGener, changeMoviesLayout } from './handlers'\r\n\r\nexport function addDashboardListener() {\r\n\r\n  const customSelect = document.querySelector('.custom-select')\r\n  customSelect.addEventListener('click', changeSelectedGener)\r\n\r\n  //  @ Movies view (grid/list) selector\r\n  const dashboardView = document.querySelector('.dashboard-view')\r\n  dashboardView.addEventListener('click', changeMoviesLayout)\r\n}\r\n","//  renderModalMovie   =====================\r\n\r\nimport { addModalMovieListener } from '../listeners'\r\nimport { getDBdata } from '../db'\r\n\r\nconst movieContent = document.querySelector('.modal > .movie-content')\r\n\r\nexport const renderModalMovie = (id) => {\r\n\r\n  const modalMovie = getDBdata('movies').[id]\r\n\r\n  if (!modalMovie) {\r\n    movieContent.innerHTML = ''\r\n    movieContent.innerHTML =\r\n      `\r\n      <div class=\"allert-warning text-center\">localStorage empty. &nbsp;</div>\r\n      <div class=\"allert-warning text-center \">Reload app to get movies from the server</div>\r\n      `\r\n    return\r\n  }\r\n\r\n  const { name, img, description, year, genres, director, starring } = modalMovie\r\n\r\n  const genresList = genres\r\n    .map(genre => `<span>${genre}</span>`)\r\n    .join('')\r\n\r\n  const starringList = starring\r\n    .map(star => `&nbsp;<span>${star}</span>`)\r\n    .join(',')\r\n\r\n  const content = `\r\n      <div class=\"modal-close\">&times;</div>\r\n      <div class=\"movie-content-left\">\r\n        <img src=${img} class=\"movie-img\"\r\n          alt=\"${name}\">\r\n        <div class=\"movie-star-year\">\r\n          <div class=\"movie-star\">&star;</div>\r\n          <div class=\"movie-year\">${year}</div>\r\n        </div>\r\n        <div class=\"movie-geners\">${genresList}\r\n        </div>\r\n      </div>\r\n     \r\n      <div class=\"movie-content-right\">\r\n        <div class=\"movie-title\">${name}</div>\r\n        <div class=\"movie-description\">\r\n         ${description}\r\n        </div>\r\n        <div class=\"movie-director\">\r\n          <span class=\"movie-text-bold\">Director:</span>\r\n          ${director}\r\n        </div>\r\n        <div class=\"movie-starting\">\r\n          <span class=\"movie-text-bold\">Starting 2:&nbsp;</span>\r\n          ${starringList}\r\n          <span>Tony Goldwyn&nbsp;</span>\r\n        </div>\r\n       </div>\r\n\r\n      </div>\r\n    `\r\n  movieContent.innerHTML = ''\r\n  movieContent.innerHTML = content\r\n  addModalMovieListener()\r\n}\r\n","// openModalMovieHandler\r\nimport { renderModalMovie } from './renders/renderModalMovie'\r\n\r\nexport function openModalMovie(e) {\r\n  const id = e.target\r\n    .closest('[data-id]')?.dataset.id\r\n  if (!id) { return }\r\n  renderModalMovie(id)\r\n\r\n  const modal = document.querySelector('.modal')\r\n  modal.classList.remove('modal-hide')\r\n}\r\n\r\n// getFavorites \r\n\r\nconst moviesWrapper = document.querySelector('.movies-wrapper')\r\n\r\nexport function getFavorites() {\r\n  return [...moviesWrapper.querySelectorAll('.card')]\r\n    .filter(card => card.dataset.star === 'favorite')\r\n    .map(card => card.dataset.id)\r\n}\r\n\r\n// Grouping movies by genres \r\n\r\nexport function groupMoviesByGenres(movies, genres) {\r\n  //  All geners \r\n  const allGeners = [...new Set(movies.map(movie => movie[genres]).flat())]\r\n\r\n  // Grouping movies by genres\r\n  const moviesByGeners = { 'all': movies }\r\n  for (let value of allGeners) {\r\n    moviesByGeners[value] = movies.filter(movie => movie[genres].includes(value))\r\n  }\r\n\r\n  allGeners.unshift('all')\r\n\r\n  return [allGeners, moviesByGeners]\r\n}\r\n\r\n//  Truncate paragraph length\r\n\r\nexport function truncate(str, len) {\r\n  if (str.length > len && str.length > 0) {\r\n    let new_str = str + ' '\r\n    new_str = str.substr(0, len)\r\n    new_str = str.substr(0, new_str.lastIndexOf(' '))\r\n    new_str = new_str.length > 0 ? new_str : str.substr(0, len)\r\n    return new_str + '...'\r\n  }\r\n  return str\r\n}","import { getDBdata } from '../db'\r\nimport { addDashboardListener } from '../listeners'\r\n\r\nexport const renderDashboard = () => {\r\n\r\n  const dashboard = document.querySelector('.dashboard')\r\n\r\n  const genres = getDBdata('genres') ?? []\r\n\r\n  const genresOptionsList = genres\r\n    .map(genre => {\r\n      return `<option value=\"${genre}\">${genre}</option>`\r\n    }).join('')\r\n\r\n  const dashboardContent = `\r\n        <div class=\"dashboard-select\">\r\n        <select class=\"custom-select\">\r\n          <option selected>select genre</option>\r\n          ${genresOptionsList}\r\n        </select>\r\n      </div>\r\n\r\n      <div class=\"dashboard-view\">\r\n        <div class=\"view-text\">view as:</div>\r\n        <div class=\"svg-icon grid-dark\" data-layout=\"grid\"></div>\r\n        <div class=\"svg-icon list-gray\" data-layout=\"list\"></div>\r\n      </div>\r\n  `\r\n\r\n  dashboard.innerHTML = ''\r\n  dashboard.innerHTML = dashboardContent\r\n\r\n  addDashboardListener()\r\n}","// @ Get all movies from remote server \r\n//  and save them to localStorage\r\nimport { removeDBdata, setDBdata, getDBdata } from './db'\r\nimport { groupMoviesByGenres } from './helpers'\r\nimport { renderAllMoviesGrid } from './renders/renderAllMoviesGrid'\r\nimport { renderDashboard } from './renders/renderDashboard'\r\n\r\n// Fetch movies from remote server\r\n\r\nexport async function fetchData(url) {\r\n  try {\r\n    const response = await fetch(url)\r\n    const movies = await response.json()\r\n    movies.map(item => {\r\n      if (item.name === 'The Matrix') {\r\n        item.img = \"https://image.tmdb.org/t/p/w500/zE3dfBIYNMBXQrhQaCyZl99wwS0.jpg\"\r\n      }\r\n    })\r\n    const idSet = new Set(movies.map(movie => movie.id))\r\n    const moviesById = {}\r\n    for (let value of idSet) {\r\n      moviesById[value] = movies.filter(item => item.id === value)[0]\r\n    }\r\n\r\n    removeDBdata('movies');\r\n    setDBdata('movies', moviesById)\r\n\r\n    // Grouping movies by genres \r\n\r\n    const [allGeners, moviesByGeners] = groupMoviesByGenres(movies, 'genres')\r\n\r\n    removeDBdata('genres');\r\n    setDBdata('genres', allGeners)\r\n    removeDBdata('moviesByGenres');\r\n    setDBdata('moviesByGenres', moviesByGeners)\r\n\r\n    renderDashboard()\r\n\r\n    const selectedGenre = getDBdata('selectedGenre') ?? 'all'\r\n    renderAllMoviesGrid(moviesByGeners[selectedGenre])\r\n\r\n  } catch (err) {\r\n    console.log(`Problem with fetching data: ${err.message}`)\r\n  }\r\n}","import { getDBdata } from './js/db'\r\nimport { fetchData } from './js/fetchData'\r\nimport { renderFavorites } from './js/renders/renderFavorites'\r\nimport { openNodal, clickFavoriteUl, changeMoviesLayout, changeSelectedGener } from './js/handlers'\r\n// import { renderDashboard } from './js/renders/renderDashboard'\r\n\r\n// Constants \r\n\r\nconst FullList = `http://my-json-server.typicode.com/moviedb-tech/movies/list`\r\n\r\n//  Fetch data from server \r\n\r\nfetchData(FullList)\r\n\r\n// @ Render favorite movies list\r\n\r\nrenderFavorites(getDBdata('favoriteMoviesId'))\r\n\r\n// EventListeners\r\n\r\n// @ Movies gallery wrapper\r\nconst moviesGallery = document.querySelector('.movie-gallery')\r\nmoviesGallery.addEventListener('click', openNodal)\r\n\r\n// @ Favorite list\r\nconst favoriteUl = document.querySelector('.favorite-ul')\r\nfavoriteUl.addEventListener('click', clickFavoriteUl)\r\n"]}